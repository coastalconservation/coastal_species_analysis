---
title: "ssdm_modeling_test"
format: html
---

The purpose of this document is to practice using the species distribution modeling package `ssdm`

After processing, the environmental rasters and the observation data are put into a folder within the data folder titled `model_processed`

```{r}
# Load packages 
library(tidyverse)
library(dplyr)
library(SSDM)
library(biooracler)
library(raster)
library(terra)
library(purrr)
library(shinyFiles) # For ssdm shiny interface

# Load functions 
source(here::here('scripts', 'R', 'MarineBioClean.R'))
```

## Environmental rasters from BioOracle

Variables

air temperature = tas / mixed layer depth = mlotst / ocean temperature = thetao / salinity = so / cloud fraction = clt / oxygen = o2

#### Downloading Layers

```{r}
# Define layers of interest
layer_list <- c("tas_baseline_2000_2020_depthsurf",
                "o2_baseline_2000_2018_depthmax",
                "mlotst_baseline_2000_2019_depthsurf",
                "thetao_baseline_2000_2019_depthsurf",
                "so_baseline_2000_2019_depthsurf",
                "clt_baseline_2000_2020_depthsurf")

# Define constraints
constraints <- list(time = c('2000-01-01T00:00:00Z', '2000-01-01T00:00:00Z'),
                    latitude = c(32, 43),
                    longitude = c(-126, -116))

# Define file path
outpath <- file.path("~/Desktop/MEDS/capstone/coastal_species_analysis/data/raw/BioOrc_rasters/")
dir.create(outpath, showWarnings = FALSE, recursive = TRUE)

# Download, filter, and save rasters
walk(layer_list, ~{
  r <- download_layers(dataset_id = .x, constraints = constraints, fmt = "raster")
  r_sub <- subset(r, grep('_mean', names(r), value = TRUE))
  terra::writeRaster(r_sub, file = file.path(outpath, paste0(.x, "_mean_00.tif")), overwrite = TRUE, filetype="GTiff")
})

# Cleanup any unwanted files
file.remove(list.files(outpath, pattern = ".axu.json$", full.names = TRUE))

# Read and stack rasters
env_00 <- terra::rast(list.files(outpath, pattern="mean_00.tif", full.names=TRUE))

```

Rasters ended up in data/raw/BioOrc_rasters

```{r}
# View rasters 
print(env_00)


terra::ext(env_00)  # Check spatial extent
terra::res(env_00)  # Check resolution
terra::crs(env_00)


terra::plot(env_00)

describe(env_00[[1]])
```

### Download projected environmental data

```{r}
# Define layers of interest for future data 
layer_list_50 <- c("tas_ssp460_2020_2100_depthsurf",
                "o2_ssp460_2020_2100_depthmax",
                "mlotst_ssp460_2020_2100_depthsurf",
                "thetao_ssp460_2020_2100_depthsurf",
                "so_ssp460_2020_2100_depthsurf",
                "clt_ssp460_2020_2100_depthsurf")

# Define constraints
constraints <- list(time = c('2050-01-01T00:00:00Z', '2050-01-01T00:00:00Z'),
                    latitude = c(32, 43),
                    longitude = c(-126, -116))

# Define file path
outpath <- file.path("~/Desktop/MEDS/capstone/coastal_species_analysis/data/raw/BioOrc_rasters/")
dir.create(outpath, showWarnings = FALSE, recursive = TRUE)

# Download, filter, and save rasters
walk(layer_list_50, ~{
  r <- download_layers(dataset_id = .x, constraints = constraints, fmt = "raster")
  r_sub <- subset(r, grep('_mean', names(r), value = TRUE))
  terra::writeRaster(r_sub, file = file.path(outpath, paste0("2050", .x, "_mean_50.tif")), overwrite = TRUE, filetype="GTiff")
})

# Cleanup any unwanted files
file.remove(list.files(outpath, pattern = ".axu.json$", full.names = TRUE))

# Read and stack rasters
env_50 <- terra::rast(list.files(outpath, pattern="mean_00.tif", full.names=TRUE))

```

## MARINe Biodiversity

```{r}
# Read in biodiversity data 
biodiv_2025 <- MarineBioClean(cbs_excel_name = 'cbs_data_2025.xlsx', 
                              point_contact_sheet = 'point_contact_summary_layered',
                              quadrat_sheet = 'quadrat_summary_data',
                              swath_sheet = 'swath_summary_data')

# Filter years to be from 2018-2024 for purpose of this test 
biodiv_filter <- biodiv_2025 |> 
  filter(year >= 2018)
```

### Multiple observations within the same point

Since species lump and lat long are already grouped by, this code produces a data frame where the number of observations are expanded out so each row represents a single presence within a point

-   Do not group by marine site
-   Expand out the number of observations so each row is a single observation

```{r}
# NEW STRATEGEY -----
# only group by species and latitude longitude points
# Dont remove when observation is zero 
# When num_count is larger than 1, separate the count into rows where each row is one observation

# New grouping without marine site 
biodiv_obs <- biodiv_filter |> 
  group_by(species_lump, latitude, longitude) |> 
  summarise(num_count = sum(total_count)) |> 
  ungroup()

# Expand rows & keep observation column
biodiv_obs_present <- biodiv_obs |> 
  filter(num_count >=1 ) |>  
  uncount(num_count) |>  # Expand rows for species present
  mutate(observation = 1) 


# Add rows for absent species (num_count == 0)
biodiv_obs_absent <- biodiv_obs |> 
  filter(num_count == 0) |> 
  mutate(observation = 0) |>  # Mark as absent
  dplyr::select(-num_count)

# Combine both datasets
biodiv_obs_01 <- bind_rows(biodiv_obs_present, biodiv_obs_absent) 
```

### Select species with northern range edge in Dangermond

**Jania verrucosa**:

```{r}
# Pick species with Northern Range Edge in Dangermond 
spp_j_verrucosa <- biodiv_obs_01 |> 
  filter(species_lump == "Jania verrucosa")

```

How the txt is written:

sep = "," dec = "."

```{r}
# Download this data frame as a CSV ----

# Define the file name
output_file2 <- file.path(output_folder, "spp_j_verrucosa.txt")

# Save the data frame as a TXT file
write.table(spp_j_verrucosa, output_file2, sep = ",", dec = ".", row.names = FALSE, quote = FALSE)

# Print confirmation message
cat("Txt file saved to:", output_file2, "\n")


```

## Using the SSDM graphical interface

Type gui() in the console, select the files from the `model_processed` folder
