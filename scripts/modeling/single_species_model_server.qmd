---
title: "loading data from server"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

Notes: 
Should probably make it so that it tells the user which models were used 

Current issues:

Map is not always using the same scale so I am getting different rasters: Solved by using set.seed
Inputing certain species into function is causing function to crash (Callianax biplicata, Spyridia filamentosa)
Legend is not consistently 0-1
Function does not seem to be running consistently 


```{r}
# Load packages
library(tidyverse)
library(dplyr)
library(SSDM)
library(biooracler)
library(raster)
library(terra)
library(purrr)
library(shinyFiles) # For ssdm shiny interface
library(here)
library(sf)
library(tmap)

# Load functions 
source(here::here('scripts', 'functions', 'clean_biodiv.R'))
source(here::here('scripts', 'functions', 'single_species_model.R'))
```

I think to run multiple species we just have to subset before modeling

```{r}
single_species_model('Hedophyllum sessile')
```


### Read in Raster Data

```{r}
# Manually read in the rasters
thetao_mean_50  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/thetao_mean_50.tif")
tas_mean_50     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/tas_mean_50.tif")
so_mean_50      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/so_mean_50.tif")
o2_mean_50      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/o2_mean_50.tif")
mlotst_mean_50  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/mlotst_mean_50.tif")
clt_mean_50     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/clt_mean_50.tif")

# Combine into one multi-layer object
env_50_load <- c(thetao_mean_50,
                  tas_mean_50,
                  so_mean_50,
                  o2_mean_50,
                  mlotst_mean_50,
                  clt_mean_50)
```

```{r}
# Change to env_ssp460 
env_50_load <- stack(env_50_load)
```

```{r}
# Manually read in the historical rasters
thetao_mean_00  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/thetao_mean_00.tif")
tas_mean_00     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/tas_mean_00.tif")
so_mean_00      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/so_mean_00.tif")
o2_mean_00      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/o2_mean_00.tif")
mlotst_mean_00  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/mlotst_mean_00.tif")
clt_mean_00     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/clt_mean_00.tif")

# Combine into a single multi‐layer SpatRaster
env_00_load <- c(
  thetao_mean_00,
  tas_mean_00,
  so_mean_00,
  o2_mean_00,
  mlotst_mean_00,
  clt_mean_00
)

env_00_load <- stack(env_00_load)
```

### Read in Biodiv data

```{r}
# Read in biodiversity data 
biodiv_2025 <- clean_biodiv(cbs_excel_name = 'cbs_data_2025.xlsx', 
                              point_contact_sheet = 'point_contact_summary_layered',
                              quadrat_sheet = 'quadrat_summary_data',
                              swath_sheet = 'swath_summary_data')
```

### Modeling with Alaria marginata

##### Formatting data

```{r}
# Filter to alaria
alaria_data <- biodiv_2025 %>% 
  filter(species_lump == "Alaria marginata")
```

```{r}
# Formatting observation data
alaria_obs <- alaria_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
```

### Creating binary occurence column

There is an issue here using the `uncount()` function. Because we are now including absences, it does not know what to do with the zeros. A potential fix here is to create two data sets, one with just zeros and the other with the uncount() applied to the presence data and then stack them on top of each other. 

```{r}
# Expand rows & keep observation column
alaria_pres_abs <- alaria_obs %>%
  mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>%
  dplyr::select(-num_count)
```


### Running SDMs, GLM AND GAM

##### Testing with subsetting outside of the model

This is to test running models with both absence and presence data. To get models to run with presence and absence data (not just presence data) I subsetted the data to the species of interest outside of the model function and ensured it was a data frame before running the model. I also added a *pcol* argument to the model. This argument tells the model where the presence/absence data should be found. 

It is still unknown why the dataset had to be turned into a dataframe, as it appears like it was always a dataframe.All the models appear to be working except the GAM

```{r}
# Subset the data to the species of interest
alaria_subset <- subset(alaria_pres_abs, species_lump == 'Alaria marginata')
```

```{r}
# Turn data into data frame
alaria_subset <- as.data.frame(alaria_subset)

# Check the structure to make sure it looks right
str(alaria_subset)

# Run the model and add in Pcol
ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    alaria_subset, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    Pcol = 'occurrence',
                    verbose = FALSE)

```

```{r}
# Show popup about data
#plot(ESDM)
```

```{r}
# Show single graph and auc information
#plot(ESDM@projection, main = 'ESDM\nfor Alaria marginata\nwith GAM and GLM algorithms')

#knitr::kable(ESDM@evaluation)
```

### Function for modeling a single species with just presence data

```{r}
single_species_model <- function(species){
  
  species_data <- biodiv_2025 %>% 
  filter(species_lump == species)
  
  species_obs <- species_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
  
  species_obs_present <- species_obs |>
  filter(num_count >=1 ) |>
  uncount(num_count)
  

SDM_glm <- modelling('GLM', subset(species_obs_present, species_obs_present$species_lump == species), 
                 env_00_load, Xcol = 'longitude', Ycol = 'latitude', verbose = FALSE)
plot(SDM_glm@projection, main = 'SDM\nfor species\nwith GLM algorithm')
}
```

```{r}
single_species_model('Pisaster ochraceus')
```


### Function for modeling with both presence and absence data where you can add env_load


```{r}
abs_pres_model <- function(species){
  
  species_data <- biodiv_2025 %>% 
  filter(species_lump == species)
  
  species_obs <- species_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
  
  # Expand rows & keep observation column
  species_pres_abs <- species_obs %>%
  mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>% 
  dplyr::select(-num_count)
  
  # Subset the species
  species_subset <- subset(species_pres_abs, species_pres_abs$species_lump == species)
  
  # Turn subset into data frame
  species_subset <- as.data.frame(species_subset)
  
# Run the model and add in Pcol
  ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    species_subset, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    Pcol = 'occurrence',
                    verbose = FALSE)

plot(ESDM@projection, main = paste0("ESDM\nfor ", species, " with ESDM algorithm\n using"))

knitr::kable(ESDM@evaluation)

plot(ESDM)
}
```

```{r}
abs_pres_model('Grateloupia californica')
```
a
```{r}
abs_pres_model('Pisaster ochraceus', env_00_load)
```

Somehow, I am getting an error that one of the packages is using JAVA, but I am not sure which 

### Past and pres

SDM_projection <- project(SDM,Env_new)


```{r}
future_model <- function(species){
  
  species_data <- biodiv_2025 %>% 
  filter(species_lump == species)
  
  species_obs <- species_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
  
  # Expand rows & keep observation column
  species_pres_abs <- species_obs %>%
  mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>% 
  dplyr::select(-num_count)
  
  # Subset the species
  species_subset <- subset(species_pres_abs, species_pres_abs$species_lump == species)
  
  # Turn subset into data frame
  species_subset <- as.data.frame(species_subset)
  
# Run the model and add in Pcol
  ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    species_subset, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    Pcol = 'occurrence',
                    verbose = FALSE)

  ESDM_projection <- SSDM::project(ESDM, env_50_load)

plot(ESDM@projection, main = paste0("ESDM\nfor ", species, " with ESDM algorithm"))

knitr::kable(ESDM@evaluation)

plot(ESDM_projection)
}
```



```{r}
future_model('Grateloupia californica')
```




create function that provides a raster
then create a function that provides a map

Need to make it so it cleans the species name into one word instead of two or use a _

To plot change over time:

change_map <- ESDM_projection@projection - ESDM@projection
plot(change_map, main = paste0("Change in suitability (2050 - now)\nfor ", species))



# TEST TMAP FUNCTION FOR CHANGE IN HABITAT

making t-map that will show change in expected habitat

```{r}
tmap_change_map <- function(species, save_plot = FALSE) {
  # Define file path for the change raster
  change_path <- here::here("scripts", "modeling", "future_output_rasters", 
                            paste0("ESDM_", gsub(" ", "_", species), "_change.tif"))

  # Load the change raster
  change_rast <- rast(change_path)

 breaks_seq <- seq(-1, 1, by = 0.2)

  # Create tmap
  tm <- tm_shape(change_rast) +
    tm_raster(
      title = "Change in Habitat Suitability",
      palette = "-RdBu",
      style = "fixed",
      breaks = breaks_seq,
      legend.show = TRUE
    ) +
    tm_layout(
      main.title = paste0("Change in Suitability (2050 - Now)\n", species),
      legend.outside = TRUE
    )
  print(tm)
}


```

```{r}
tmap_change_map('Hedophyllum sessile')
```

# Function for getting the rasters for every species

```{r}
all_species_rast <- function(data_set) {
  # Count observations per species per location
  valid_species <- data_set %>%
    group_by(species_lump, latitude, longitude) %>%
    summarise(total = sum(total_count), .groups = "drop") %>%
    group_by(species_lump) %>%
    summarise(n_sites = sum(total > 5), .groups = "drop") %>%
    filter(n_sites >= 3) %>%
    pull(species_lump)

  # Loop through valid species
  for (species in valid_species) {
    message("Running model for: ", species)
    try(single_species_model(species), silent = TRUE)
  }
}

```


```{r}
all_species_rast(biodiv_2025)
```

