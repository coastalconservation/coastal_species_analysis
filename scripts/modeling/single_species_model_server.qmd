---
title: "loading data from server"
format: html
editor: visual
---

```{r}
# Load packages
library(tidyverse)
library(dplyr)
library(SSDM)
library(biooracler)
library(raster)
library(terra)
library(purrr)
library(shinyFiles) # For ssdm shiny interface
library(here)
library(sf)

# Load functions 
source(here::here('scripts', 'functions', 'clean_biodiv.R'))
source(here::here('scripts', 'functions', 'model_sing_species.R'))
```

I think to run multiple species we just have to subset before modeling

### Read in Raster Data

```{r}
# Manually read in the rasters
thetao_mean_50  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/thetao_mean_50.tif")
tas_mean_50     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/tas_mean_50.tif")
so_mean_50      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/so_mean_50.tif")
o2_mean_50      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/o2_mean_50.tif")
mlotst_mean_50  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/mlotst_mean_50.tif")
clt_mean_50     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/projected_ssp460/clt_mean_50.tif")

# Combine into one multi-layer object
env_50_load <- c(thetao_mean_50,
                  tas_mean_50,
                  so_mean_50,
                  o2_mean_50,
                  mlotst_mean_50,
                  clt_mean_50)
```

```{r}
# Change to env_ssp460 
env_50_load <- stack(env_50_load)
```

```{r}
# Manually read in the historical rasters
thetao_mean_00  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/thetao_mean_00.tif")
tas_mean_00     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/tas_mean_00.tif")
so_mean_00      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/so_mean_00.tif")
o2_mean_00      <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/o2_mean_00.tif")
mlotst_mean_00  <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/mlotst_mean_00.tif")
clt_mean_00     <- rast("/capstone/coastalconservation/data/raw/BioOrc_rasters/historical/clt_mean_00.tif")

# Combine into a single multi‐layer SpatRaster
env_00_load <- c(
  thetao_mean_00,
  tas_mean_00,
  so_mean_00,
  o2_mean_00,
  mlotst_mean_00,
  clt_mean_00
)

env_00_load <- stack(env_00_load)
```

### Read in Biodiv data

```{r}
# Read in biodiversity data 
biodiv_2025 <- clean_biodiv(cbs_excel_name = 'cbs_data_2025.xlsx', 
                              point_contact_sheet = 'point_contact_summary_layered',
                              quadrat_sheet = 'quadrat_summary_data',
                              swath_sheet = 'swath_summary_data')
```

### Modeling with Alaria marginata

##### Formatting data

```{r}
# Filter to alaria
alaria_data <- biodiv_2025 %>% 
  filter(species_lump == "Alaria marginata")
```

```{r}
# Formatting observation data
alaria_obs <- alaria_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
```

### Creating binary occurence column

There is an issue here using the `uncount()` function. Because we are now including absences, it does not know what to do with the zeros. A potential fix here is to create two data sets, one with just zeros and the other with the uncount() applied to the presence data and then stack them on top of each other. 

```{r}
# Expand rows & keep observation column
alaria_pres_abs <- alaria_obs %>%
  mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>%
  dplyr::select(-num_count)
```


### Running SDMs, GLM AND GAM

##### Testing with subsetting outside of the model

This is to test running models with both absence and presence data. To get models to run with presence and absence data (not just presence data) I subsetted the data to the species of interest outside of the model function and ensured it was a data frame before running the model. I also added a *pcol* argument to the model. This argument tells the model where the presence/absence data should be found. 

It is still unknown why the dataset had to be turned into a dataframe, as it appears like it was always a dataframe.All the models appear to be working except the GAM

```{r}
# Subset the data to the species of interest
alaria_subset <- subset(alaria_pres_abs, species_lump == 'Alaria marginata')
```

```{r}
# Turn data into data frame
alaria_subset <- as.data.frame(alaria_subset)

# Check the structure to make sure it looks right
str(alaria_subset)

# Run the model and add in Pcol
ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    alaria_subset, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    Pcol = 'occurrence',
                    verbose = FALSE)

```

```{r}
# Show popup about data
#plot(ESDM)
```

```{r}
# Show single graph and auc information
#plot(ESDM@projection, main = 'ESDM\nfor Alaria marginata\nwith GAM and GLM algorithms')

#knitr::kable(ESDM@evaluation)
```

### Function for modeling a single species with just presence data

```{r}
single_species_model <- function(species){
  
  species_data <- biodiv_2025 %>% 
  filter(species_lump == species)
  
  species_obs <- species_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
  
  species_obs_present <- species_obs |>
  filter(num_count >=1 ) |>
  uncount(num_count)
  

SDM_glm <- modelling('GLM', subset(species_obs_present, species_obs_present$species_lump == species), 
                 env_00_load, Xcol = 'longitude', Ycol = 'latitude', verbose = FALSE)
plot(SDM_glm@projection, main = 'SDM\nfor species\nwith GLM algorithm')
}
```

```{r}
single_species_model('Pisaster ochraceus')
```


### Function for modeling with both presence and absence data


```{r}
abs_pres_model <- function(species){
  
  species_data <- biodiv_2025 %>% 
  filter(species_lump == species)
  
  species_obs <- species_data |>
  group_by(species_lump, latitude, longitude) |>
  summarise(num_count = sum(total_count)) |>
  ungroup()
  
  # Expand rows & keep observation column
  species_pres_abs <- species_obs %>%
  mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>% 
  dplyr::select(-num_count)
  
  # Subset the species
  species_subset <- subset(species_pres_abs, species_pres_abs$species_lump == species)
  
  # Turn subset into data frame
  species_subset <- as.data.frame(species_subset)
  
# Run the model and add in Pcol
ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    species_subset, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    Pcol = 'occurrence',
                    verbose = FALSE)

plot(ESDM@projection, main = paste0("ESDM\nfor ", species, " with ESDM algorithm"))
}
```

```{r}
abs_pres_model('Pisaster ochraceus')
```
Somehow, I am getting an error that one of the packages is using JAVA, but I am not sure which 

### Comparing to Presence only models:

In order to ensure the difference in results is comming from adding in the presence and absence data, I still need to run the models without subseting outside of the function.

```{r}
# Create column with only presence
alaria_obs_present <- alaria_obs |>
  filter(num_count >=1 ) |>
  uncount(num_count) 
```

```{r}
# Subset the data to the species of interest
alaria_subset2 <- subset(alaria_obs_present, species_lump == 'Alaria marginata')
```

```{r}
# Turn alaria_subset2 into data.frame
alaria_subset2 <- as.data.frame(alaria_subset2)
```


```{r}
# Subset outside of model

# Run model
ESDM <- ensemble_modelling(c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'), 
                    alaria_subset2, 
                    env_00_load, 
                    Xcol = 'longitude', 
                    Ycol = 'latitude', 
                    verbose = FALSE)
plot(ESDM@projection, main = 'ESDM\nfor Alaria marginata\nwith GAM and GLM algorithms')
```

```{r}
#abs_pres_model('Pisaster ochraceus')
```



# Scratch 

```{r}
alaria_pres_abs <- as.data.frame(alaria_pres_abs)
```

```{r}
SDM_glm <- modelling('GLM', 
                     alaria_obs_present, 
                 env_00_load, 
                 Xcol = 'longitude', 
                 Ycol = 'latitude', 
                 Pcol = 'occurrence', 
                 verbose = FALSE)
plot(SDM_glm@projection, main = 'SDM\nfor Alaria marginata\nwith GLM algorithm')
```


# TEST TEST

```{r}
abs_pres_model_compare <- function(species, env_hist, env_proj){
  
  species_data <- biodiv_2025 %>% 
    filter(species_lump == species)
  
  species_obs <- species_data |>
    group_by(species_lump, latitude, longitude) |>
    summarise(num_count = sum(total_count)) |>
    ungroup()
  
  # Add presence/absence column
  species_pres_abs <- species_obs %>%
    mutate(occurrence = ifelse(num_count >= 1, 1, 0)) %>% 
    dplyr::select(-num_count)
  
  # Convert to data frame
  species_df <- as.data.frame(species_pres_abs)

  # Fit ensemble model on historical environment
  ESDM_hist <- ensemble_modelling(
    algorithms = c('GAM','GLM','MARS','CTA','GBM','MAXENT','ANN','RF','SVM'),
    Occurrences = species_df, 
    Env = env_hist, 
    Xcol = 'longitude', 
    Ycol = 'latitude', 
    Pcol = 'occurrence',
    verbose = FALSE
  )
  
  # Predict using projected future environment
  proj_hist <- ESDM_hist@projection
  proj_future <- predict(ESDM_hist, env_proj)

  # Difference map
  proj_diff <- proj_future - proj_hist
  
  # Plot outputs
  plot(proj_hist, main = paste0("Historical SDM: ", species))
  plot(proj_future, main = paste0("Projected SDM: ", species))
  plot(proj_diff, main = paste0("Projected - Historical: ", species))
  
  return(list(historical = proj_hist, future = proj_future, difference = proj_diff))
}

```

