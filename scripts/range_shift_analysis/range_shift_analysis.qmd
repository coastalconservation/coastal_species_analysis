---
title: "Range Shift Analysis"
format: html
editor_options: 
  chunk_output_type: console
---

## Load packages
```{r}
#| code-fold: true
library(here)
library(readr)
library(lubridate)
library(tidyverse)
library(stats) # Load necessary libraries
library(here) # For building file paths relative to project root
library(readr) # For reading CSV files
library(lubridate) # For working with date/time data (used in sourced scripts)
library(dplyr) # Data manipulation
library(tidyr) # Data tidying
library(purrr) # Functional programming tools
library(ggplot2) # Plotting
library(mgcv) # Generalized Additive Models
library(scales)
```

## Read data
```{r}
# Source cleaning function
source(here("scripts", "functions", "clean_biodiv.R"))
source(here("scripts", "functions", "cumulative_density_dataframe.R"))
source(here("scripts", "functions", "historic_range_trends.R"))
source(here("scripts", "functions", "cumulative_density_graph.R"))
# Load data
species_extent <- read_csv("/capstone/coastalconservation/data/processed/species_extent.csv")
marine_sites <- read_csv("/capstone/coastalconservation/data/processed/marine_site_segments.csv") # Load processed datasets
processed_data_path <- "/capstone/coastalconservation/data/processed"
species_names <- read_csv("/capstone/coastalconservation/data/processed/species_names.csv")

biodiv_df <- read_csv(
    file.path(
        processed_data_path,
        "clean_biodiv_2025.csv"
    ),
    show_col_types = FALSE
)
```


```{r}
dangermond_boundary_species <- species_extent %>%
    filter(str_detect(southern_extent_name, "Point Conception") |
        str_detect(northern_extent_name, "Point Conception") |
        str_detect(northern_extent_name, "Point Mugu"))
```

Northern
```{r}
northern_boundary_species <- dangermond_boundary_species %>%
    filter(
        str_detect(northern_extent_name, "Point Conception") |
            northern_extent_name == "Point Mugu"
    ) %>%
    pull(species_lump)
```

```{r}
northern_boundary_species
```

Southern
```{r}
southern_boundary_species <- dangermond_boundary_species %>%
    filter(
        str_detect(southern_extent_name, "Point Conception")
    ) %>%
    pull(species_lump)
```

```{r}
southern_boundary_species
```

```{r}
northern_trends_df <- map_dfr(
    northern_boundary_species,
    function(species_name) {
        result <- tryCatch(
            range_trend(species_name),
            error = function(e) {
                warning(paste("Failed to compute range_trend for", species_name, ":", e$message))
                return(NULL)
            }
        )

        if (is.null(result)) {
            return(tibble(
                species = species_name,
                north_trend_positive = NA,
                n_trend_rate = NA,
                r_squared = NA,
                p_val = NA
            ))
        }

        tibble(
            species = species_name,
            north_trend_positive = unname(result$n_bound_pos_trend),
            n_trend_rate = unname(result$n_trend_rate),
            r_squared = unname(result$n_r_squared),
            p_val = unname(result$n_p_val)
        )
    }
)

```


```{r}
write_csv(
    northern_trends_df,
    file = "/capstone/coastalconservation/data/processed/ntrends_stats.csv"
)
```

```{r}
northern_trends_df %>% View()
```

```{r}
northern_trends_df %>%
    filter(
        # north_trend_positive == TRUE,
        n_trend_rate > 1000,
    ) %>%
    pull(species)
```

[1] "Agathistoma eiseni"   "Aplysia californica"  "Haminoea vesicula"   
[4] "Norrisia norrisii"    "Paraxanthias taylori" "Roperia poulsoni"    
[7] "Tegula aureotincta"  

```{r}
range_plot("Agathistoma eiseni")
range_trend("Agathistoma eiseni")
```

```{r}
southern_trends_df <- map_dfr(
    southern_boundary_species,
    function(species_name) {
        result <- tryCatch(
            range_trend(species_name),
            error = function(e) {
                warning(paste("Failed to compute range_trend for", species_name, ":", e$message))
                return(NULL)
            }
        )

        if (is.null(result)) {
            return(tibble(
                species = species_name,
                north_trend_positive = NA,
                n_trend_rate = NA,
                r_squared = NA,
                p_val = NA
            ))
        }

        tibble(
            species = species_name,
            north_trend_positive = unname(result$s_bound_pos_trend),
            n_trend_rate = unname(result$s_trend_rate),
            r_squared = unname(result$s_r_squared),
            p_val = unname(result$s_p_val)
        )
    }
)
```

```{r}
write_csv(
    southern_trends_df,
    file = "/capstone/coastalconservation/data/processed/strends_stats.csv"
)
```

```{r}
southern_trends_df %>% View()
```

```{r}
southern_trends_df %>%
    filter(
        # north_trend_positive == TRUE,
        n_trend_rate > 1000,
    ) %>%
    pull(species)
```

[1] "Calliostoma annulatum"     "Calliostoma canaliculatum"
[3] "Diodora aspera"            "Henricia spp"             
[5] "Onchidella carpenteri"     "Tegula brunnea" 


```{r}
ggsave(
    "outputs/figures/range_trends/TegAur.png",
    range_plot("Tegula aureotincta")
)
```

```{r}
range_results <- range_trend("Agathistoma eiseni")
```

```{r}
for (species in biodiv_df$species_lump %>% unique()) {
    dir <- paste0(
        # "outputs/figures/gam_plot/",
        species,
        ".png"
    )
    ggsave(
        dir,
        range_plot(species)
    )
}
```

```{r}
all_trends_df <- map_dfr(
    biodiv_df %>% pull(species_lump) %>% unique(),
    function(species_name) {
        result <- tryCatch(
            range_trend(species_name),
            error = function(e) {
                warning(paste("Failed to compute range_trend for", species_name, ":", e$message))
                return(NULL)
            }
        )

        if (is.null(result)) {
            return(tibble(
                species = species_name,
                north_trend_positive = NA,
                n_trend_rate = NA,
                r_squared = NA,
                p_val = NA
            ))
        }

        tibble(
            species = species_name,
            north_trend_positive = unname(result$n_bound_pos_trend),
            n_trend_rate = unname(result$n_trend_rate),
            n_r_squared = unname(result$n_r_squared),
            n_p_val = unname(result$n_p_val),
            north_trend_positive = unname(result$s_bound_pos_trend),
            n_trend_rate = unname(result$s_trend_rate),
            r_squared = unname(result$s_r_squared),
            p_val = unname(result$s_p_val)
        )
    }
)
```

```{r}
all_boundaries_df <- map_dfr(
    biodiv_df %>% pull(species_lump) %>% unique(),
    function(species_name) {
        result <- tryCatch(
            range_trend(species_name),
            error = function(e) {
                warning(paste("Failed to compute range_trend for", species_name, ":", e$message))
                return(NULL)
            }
        )

        boundaries <- result$boundaries_df

        if (is.null(result)) {
            return(tibble(
            species = species_name,
            year_bin = boundaries$year_bin,
            year_floor = boundaries$year_floor,
            north_boundary = NA, 
            south_boundary = NA
            ))
        }

        tibble(
            species = species_name,
            year_bin = boundaries$year_bin,
            year_floor = boundaries$year_floor,
            north_boundary = boundaries$north_boundary,
            south_boundary = boundaries$south_boundary
        )
    }
) %>% arrange(species)
```

```{r}
all_boundaries_df <- all_boundaries_df %>% arrange(species) 
saveRDS(
    all_boundaries_df,
    file = "/capstone/coastalconservation/data/processed/boundaries.rds"
    )
```

```{r}
readRDS("/capstone/coastalconservation/data/processed/boundaries.rds")
```

```{r}
library(dplyr)
library(purrr)
library(tidyr)
library(mgcv)
library(tibble)
library(furrr)

# Set up parallel processing
plan(multisession)

gam_predict <- function(species_name, biodiv_df) {
  species_biodiv <- biodiv_df %>%
    semi_join(filter(marine_sites), by = "marine_site_name") %>%
    filter(species_lump == species_name, state_province == "California") %>%
    left_join(select(marine_sites, marine_site_name, coastline_m), by = "marine_site_name")

  species_cum_den <- cum_den_df(species_biodiv)

  species_pred <- species_cum_den %>%
    group_split(year_bin) %>%
    future_map_dfr(function(data_chunk) {
      year_bin_val <- unique(data_chunk$year_bin)

      model <- tryCatch(
        gam(cum_den_norm ~ s(coastline_m), data = data_chunk),
        error = function(e) {
          warning(paste("GAM fitting failed for year bin:", year_bin_val))
          return(NULL)
        }
      )

      if (is.null(model)) {
        return(tibble(
          year_bin = year_bin_val,
          coastline_m = NA_real_,
          cum_den_norm = NA_real_,
          fit = NA_real_,
          se = NA_real_,
          lower = NA_real_,
          upper = NA_real_
        ))
      }

      coastline_seq <- seq(
        min(data_chunk$coastline_m, na.rm = TRUE),
        max(data_chunk$coastline_m, na.rm = TRUE),
        length.out = 200
      )

      pred_df <- tibble(
        year_bin = year_bin_val,
        coastline_m = coastline_seq
      )

      pred_vals <- predict(model, newdata = pred_df, type = "link", se.fit = TRUE)

      pred_df %>%
        mutate(
          cum_den_norm = predict(model, newdata = pred_df) %>% pmin(1) %>% pmax(0),
          fit = pred_vals$fit,
          se = pred_vals$se.fit,
          lower = pmax(0, fit - 1.96 * se),
          upper = pmin(1, fit + 1.96 * se)
        )
    })

  return(species_pred)
}
```

```{r}
range_trend <- function(species_name, biodiv_df = clean_biodiv()) {
  species_pred <- gam_predict(species_name, biodiv_df)

  safe_approx <- function(x, y, xout) {
    valid <- !is.na(x) & !is.na(y)
    if (sum(valid) < 2) return(NA_real_)

    approx_df <- tibble(x = x[valid], y = y[valid]) %>%
      arrange(x) %>%
      distinct(x, .keep_all = TRUE)

    if (nrow(approx_df) < 2) return(NA_real_)

    approx(approx_df$x, approx_df$y, xout = xout, rule = 2)$y
  }

  species_extent_df <- species_pred %>%
    group_by(year_bin) %>%
    summarise(
      year_floor = as.integer(substr(first(year_bin), 1, 4)),
      north_boundary = safe_approx(cum_den_norm, coastline_m, 0.95),
      south_boundary = safe_approx(cum_den_norm, coastline_m, 0.05),
      .groups = "drop"
    )

  trend_stats <- function(boundary_df, boundary_col) {
    df <- boundary_df %>% filter(!is.na(.data[[boundary_col]]))
    if (nrow(df) < 2) return(list(rate = NA, p = NA, r2 = NA, reasonable = NA))

    model <- lm(reformulate("year_floor", boundary_col), data = df)
    rate <- coef(model)[2]
    summary_model <- summary(model)
    range_vals <- range(df[[boundary_col]], na.rm = TRUE)
    list(
      rate = rate,
      p = summary_model$coefficients[2, 4],
      r2 = summary_model$r.squared,
      reasonable = abs(rate) < (diff(range_vals) / 5)
    )
  }

  n_stats <- trend_stats(species_extent_df, "north_boundary")
  s_stats <- trend_stats(species_extent_df, "south_boundary")

  return(list(
    species = species_name,
    n_bound_pos_trend = if (!is.na(n_stats$rate)) n_stats$rate > 0 else NA,
    n_trend_rate = n_stats$rate,
    n_p_val = n_stats$p,
    n_r_squared = n_stats$r2,
    s_bound_pos_trend = if (!is.na(s_stats$rate)) s_stats$rate > 0 else NA,
    s_trend_rate = s_stats$rate,
    s_p_val = s_stats$p,
    s_r_squared = s_stats$r2,
    n_reasonable = n_stats$reasonable,
    s_reasonable = s_stats$reasonable,
    boundaries_df = species_extent_df
  ))
}
```